-- -------------------------separate folder and a new file for each manager

Sub SaveMe()

Application.ScreenUpdating = False

Dim MyReqTime As String          'Holds the Territory Manager "Code"
Dim MySavedPath As Variant   'Holds the path to save the file
Dim MyRecordedFileName As String    'Holds the file name
Dim MY As Integer       'Holds the year
Dim MM As Integer      'Holds the month
Dim MD As Integer        'Holds the day

MY = Year(Now)
 MM = Month(Now)
 MD = Day(Now)


MyReqTime = Left(ActiveSheet.Name, 4)
MySavedPath = Application.WorksheetFunction.VLookup(MyTm, Range("TMSavePath"), 2, False)


    ActiveSheet.Copy

    
    ActiveWorkbook.SaveAs Filename:= _
     MySavedPath & "\" & MY & MM & MD & "_" & ActiveSheet.Name & ".xlsx"
    
    
    
    ActiveWindow.Close

Application.ScreenUpdating = True

End Sub
--------------------------------------------------------------------

------ Extract values not found in the second list from the first list


Option Base 1   'Ensure Arrays begin at 1


Sub Test()
'Loading all the array at once

Dim Array1234() As Variant    'Declare the array
Dim RC As Integer     'Get the count of the rows of data
Dim x As Integer    'Loop to write data

    'Turn off screen updating (MUST be turned back on at the end)
    Application.ScreenUpdating = False
    'Turn off automatic calculation (MUST be turned back on at the end)
    Application.Calculation = xlCalculationManual
    
    'Clear old written data
    Range("D:E").ClearContents
    
    'Add start time (just for clocking the speed)
    Range("G1").Value = Time()


'Read the data
    'Load the array
    Array1234 = Range("A1").CurrentRegion
    
    'Get the count of rows in the array
    RC = UBound(Array1234)

'Write the data
    'Selet start of "write" range
    Range("D1").Select
    
    On Error Resume Next
        For x = 1 To RC
            If IsError _
                (WorksheetFunction.Match _
                (MyArray(x, 1), Range("MyNamedRange"), 0)) Then
                ActiveCell.Value = Array1234(x, 1)
                ActiveCell.Offset(0, 1).Value = Array1234(x, 2)
                ActiveCell.Offset(1, 0).Select
            Else
                'Do nothing
            End If
        Next x
    On Error GoTo 0


    'Add stop time
    Range("G2").Value = Time()
    
    'Turn autocalculate back on
    Application.Calculation = xlCalculationAutomatic
    
    'Turn screen updating back on
    Application.ScreenUpdating = False

End Sub


---------------------------------------------------------------------------------
-- save cell values as files in folder and then add within each file, separate file wihtin each folder 


Sub SavingMultipleSheets()

'Declare the variables
Dim MyTime As String              'Holds the territory manager
Dim MySavedPath As String        'Holds the path to save the file to
Dim Nameofthefile As String        'Holds the save file name (the new file)
Dim MW As String    'Holds the name of THIS workbook
Dim X As Integer                'A simple counter
Dim Replacedfile As String         'What we will look to replace to breat the links

'Test to ensure we're on row 1
If ActiveCell.Row <> 1 Then
    MsgBox "Please ensure you select the territory manager from row 1", _
        vbCritical, "Select from row 1"
    End
End If


'The first part...creating a new workbook with our first sheet...

'Get the territory manager
MyTime = ActiveCell.Value
'Build the file name for the new file
Nameofthefile = Year(Now) & Month(Now) & Day(Now) & " - " & ActiveCell.Value & ".xlsx"
'Build the save path based on which TM was selected
MySavedPath = Application.WorksheetFunction.VLookup(MyTime, Range("TMSavePath"), 2, False) & "\"
'Get the name of THIS workbook
MW = ThisWorkbook.Name

'Move down a row to get the first sheet name
ActiveCell.Offset(1, 0).Select

'Copy that sheet
Sheets(ActiveCell.Value).Copy
'...and save it using the path and file name we built above
ActiveWorkbook.SaveAs Filename:= _
        MySavedPath & Nameofthefile, FileFormat:= _
        xlOpenXMLWorkbook, CreateBackup:=False



'The second part...go back to our master file, and get the remaining sheets...

'Go back to the master sheet...
Workbooks(MW).Activate
'...and move down a row to get the next sheet to be copied
ActiveCell.Offset(1, 0).Select

'Loop with a test to see if we've reached a blank cell
Do While ActiveCell.Value <> ""
        '...if not, increase X by 1 (to use as the sheet index number)
        X = X + 1
        'Perform the copy and paste it to out new sheet
        Sheets(ActiveCell.Value).Copy After:=Workbooks(Nameofthefile).Sheets(X)
        'Return to the master file...
        Workbooks(MW).Activate
        '...and move down a row again
        ActiveCell.Offset(1, 0).Select
'...continue to loop until we've copied all the sheets in the list
Loop



'The third part...go to the new file, and sort out the link issue...

'Go to the new workbook
Workbooks(Nameofthefile).Activate

'Build string to search for (the master file name wrapped in square brackets)
MyReplace = "[" & MW & "]"

'Loop through each sheet in the new workbook
For X = 1 To Sheets.Count
    
    'Select the sheet by its index number...
    Sheets(X).Select
    '...select all the cells
    Cells.Select
    
    'Replace our search string with blank...
    Selection.Replace What:=MyReplace, Replacement:="", LookAt:= _
        xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
    'Go to A1 (just to be tidy)
    Range("A1").Select
'Repeat loop
Next X



'The final part...go to the first sheet, then save and close

'Go to first sheet
Sheets(1).Select

'Turn off alerts (to avoid being asked if we want to save the file)
Application.DisplayAlerts = False
    
'Save the file
ActiveWorkbook.SaveAs Filename:= _
        MySavedPath & Nameofthefile, FileFormat:= _
        xlOpenXMLWorkbook, CreateBackup:=False
'Close the file
ActiveWindow.Close

'Turn the alerts back on
Application.DisplayAlerts = True

End Sub



------------------------------------------------------------------

-- Extracting a list and then renaming each sheet based on extracted list and then extracting data

Sub Macro1()

Dim K As Integer        'Holds Count of rows
Dim L As Integer        'Holds the count of copied cells
Dim MyLimit As Integer  'Holds the count of matches
Dim MyTemp As String    'Holds the MPAN #
Dim MyNewBook As String 'Holds the name of the new workbook

Application.ScreenUpdating = False

    'Ensure we're on the data sheet
    Sheets("Sheet1").Select
    
    'Get the count of the rows in the current region
    K = Range("A1").CurrentRegion.Rows.Count


    'Add a new "Scratch" Sheet after first sheet
    Sheets.Add After:=Sheets(1)
    'Rename newly added sheet
    ActiveSheet.Name = "Scratch"
    
    'Copy all of column A of the first sheet to scratch
    Sheets(1).Range("A1:A" & K).Copy Sheets("Scratch").Range("A1")
    
    'Copy all of column B of the first sheet to scratch
    Sheets(1).Range("B1:B" & K).Copy Sheets("Scratch").Range("A1048575").End(xlUp).Offset(1, 0)
    
    
    
    'Copy all of column C of the first sheet to scratch
    Sheets(1).Range("C1:C" & K).Copy Sheets("Scratch").Range("A1048575").End(xlUp).Offset(1, 0)
    
  
    'Remove all duplicates
    ActiveSheet.Range("$A:$A").RemoveDuplicates Columns:=1, Header:= _
        xlYes
    
    'Select start of range
    Range("A1").Select
    
    'Loop to test for len of 13 characters
    Do While ActiveCell.Value <> ""
        'Logical test (is this cell 13 characters long)
        If Len(ActiveCell.Value) <> 13 Then
            'Delete the whole row
            ActiveCell.EntireRow.Delete
        Else
            'Move down a cell
            ActiveCell.Offset(1, 0).Select
        End If
    Loop
    
    'Add CountIf formulas to column B (checking A,B & C)
    Range("B1:B" & Range("A1048575").End(xlUp).Row) _
        .Formula = "=COUNTIF(Sheet1!C[-1]:C[1],Scratch!RC[-1])"
    
    
    
    
     
    'Add a new workbook
    Workbooks.Add
    'Get the name of the new workbook
    MyNewBook = ActiveWorkbook.Name
    
    'Go back to this workbook
    ThisWorkbook.Activate
    
    'Select start of range
    Range("A1").Select
    
    'Loop to add sheets (one for each MPAN)
    Do While ActiveCell.Value <> ""
        'Get MPAN #
        MyTemp = ActiveCell.Value
        'Add new sheet to "MyNewBook"
        Workbooks(MyNewBook).Sheets.Add _
            After:=Workbooks(MyNewBook).Sheets(Workbooks(MyNewBook).Sheets.Count)
        'Rename newly added sheet to MPAN #
        Workbooks(MyNewBook).Sheets(Workbooks(MyNewBook).Sheets.Count).Name = MyTemp
        'Move down a cell
        ActiveCell.Offset(1, 0).Select
    Loop
    
    'Select start of range
    Range("A1").Select
    
    
    

    
    'The outer copy and paste loop
    Do While ActiveCell.Value <> ""

        'Select start of range
        Range("A1").Select
        
        'Get the first value we're looking for
        MyTemp = ActiveCell.Value
        'Get the actual count of matches
        MyLimit = ActiveCell.Offset(0, 1).Value
        
        
        'Go to the data sheet
        Sheets("Sheet1").Select
    
    
    
        'The A loop
        'Select start of range
        Range("A1").Select
        
            Do While ActiveCell.Value <> ""
                If ActiveCell.Value <> MyTemp Then
                    'Move down a cell
                    ActiveCell.Offset(1, 0).Select
                Else
                    'Copy the entire row to thye appropriate sheet in the new Workbook
                    ActiveCell.EntireRow.Copy _
                        Workbooks(MyNewBook).Sheets(MyTemp).Range("A1048575").End(xlUp).Offset(1, 0)
                    
                    'Move down a cell
                    ActiveCell.Offset(1, 0).Select
                    
                    'Increase Y by 1
                    L = L + 1
                    
                    'If we have all the matches, add headings and go to NextOuterLoop
                    If L = MyLimit Then
                        Range("A1").EntireRow.Copy Workbooks(MyNewBook).Sheets(MyTemp).Range("A1")
                        GoTo NextOuterLoop
                    End If
                End If
            Loop
   
   
   
        'The B loop
        'Select start of range
        Range("B1").Select
        
            Do While ActiveCell.Value <> ""
                If ActiveCell.Value <> MyTemp Then
                    'Move down a cell
                    ActiveCell.Offset(1, 0).Select
                Else
                    'Copy the entire row to thye appropriate sheet in the new Workbook
                    ActiveCell.EntireRow.Copy _
                        Workbooks(MyNewBook).Sheets(MyTemp).Range("A1048575").End(xlUp).Offset(1, 0)
                    
                    'Move down a cell
                    ActiveCell.Offset(1, 0).Select
                    
                    'Increase Y by 1
                    L = L + 1
                    
                    'If we have all the matches, add headings and go to NextOuterLoop
                    If L = MyLimit Then
                        Range("A1").EntireRow.Copy Workbooks(MyNewBook).Sheets(MyTemp).Range("A1")
                        GoTo NextOuterLoop
                    End If
                End If
            Loop
   
   
   
   
        'The C loop
        'Select start of range
        Range("C1").Select
        
            Do While ActiveCell.Value <> ""
                If ActiveCell.Value <> MyTemp Then
                    'Move down a cell
                    ActiveCell.Offset(1, 0).Select
                Else
                    'Copy the entire row to thye appropriate sheet in the new Workbook
                    ActiveCell.EntireRow.Copy _
                        Workbooks(MyNewBook).Sheets(MyTemp).Range("A1048575").End(xlUp).Offset(1, 0)
                    
                    'Move down a cell
                    ActiveCell.Offset(1, 0).Select
                    
                    'Increase Y by 1
                    L = L + 1
                    
                    'If we have all the matches, add headings and go to NextOuterLoop
                    If Y = MyLimit Then
                        Range("A1").EntireRow.Copy Workbooks(MyNewBook).Sheets(MyTemp).Range("A1")
                        GoTo NextOuterLoop
                    End If
                End If
            Loop
   
 
   
NextOuterLoop:
    
        'Reset L
        L = 0
        'Go to the scratch sheet
        Sheets("Scratch").Select
        'Delete the entire row
        Range("A1").EntireRow.Delete
    
    Loop
    
'Turn off display alerts
Application.DisplayAlerts = False
'Delete the scratch sheet
Sheets("Scratch").Delete
'Turn on display alerts
Application.DisplayAlerts = True

'Ensure we're back on the data sheet
Sheets("Sheet1").Select
'Select start of range
Range("A1").Select


Application.ScreenUpdating = True

End Sub



